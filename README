primenet.py:
To get assignment and send results, you can use primenet.py python script.

Note: primenet.py should support python versions from 2.6 to 3.9.

primenet.py should be run in the same directory as Mlucas binary and they both work together like this:
- primenet.py will get new assignments if necessary and append to worktodo.ini file
- Mlucas reads the worktodo.ini file and runs the first assignment
- Mlucas outputs the results in results.txt file and remove the first line for worktodo.ini when done
- primenet.py sends the results from results.txt and place them in results_send.txt to not send them twice.

primenet.py can register the computer to mersenne.org web site, so that you can track each computer separately in https://www.mersenne.org/cpus/.

To use this feature, you have to launch primenet.py with --register option at least once:
$ ./primenet.py --register --username [uid] --password [pwd]
Currently, only the hostname is automatically detected, if you want to give hardware details from your computer, you can add the corresponding options like this (this is correct for a RaspberryPi4 2GB):
$ ./primenet.py --register --cpu_model "ARM Cortex A-72" --features "asimd" --frequency "1500" --L1 32 --L2 512 --memory 2000 --np 4 --hp 0

primenet.py is saving the options in local.ini file, so that you only have to give it once. So if you ran the first command, you don't have to repeat username and password in the second.
You can also modifiy the local.ini file by hand to change the options.
You can relaunch primenet.py with --register option at any time to update the values to mersenne.org.

Then, you should run primenet.py in foreground (not as a daemon) at least once to check that it works correctly:
$ ./primenet.py -d -t 0

If everything is right, you should have a non empty worktodo.ini file and you can launch Mlucas.

Then, if you have a permanent internet connection, you can run primenet.py as a daemon so that worktodo and result are automatically updated and progress regularly send to mersenne.org.

It is enough to launch:
$ ./primenet.py -d 

Several options can be usefull to adapt the primenet.py behavior:
- -T to chose the worktype (double-check LL by default)
- -t (or --timeout) to chose the frequency of updates (6 hours by default)
- -n (or --num_cache) to tell how many assignments to cache. One more assignment will automatically by obtained if the current estimated time left is smalller than the 3*timeout or when the percentage of completion of the current assignment exceed percent_limit so that you should never run out of assignment even if num_cache is 1 (the default)
- -L (or --percent_limit) to get one more assignment when the current has reach the given percentage.

Additionnaly, here is a tip to run primenet.py and mlucas as a daemon using systemd.
Just create a unit file in /etc/systemd/system/primenet.service 
with a content similar to this one (adapt the file paths and user name):
-------------------------
[Unit]
Description=MLucas GIMPS primenet
After=network.target

[Service]
WorkingDirectory=/home/pi/mlucas/run0
ExecStart=/home/pi/mlucas/primenet.py -d
Type=simple
User=pi
Restart=on-failure

[Install]
WantedBy=default.target
-------------------------
And for mlucas, create a unit file in /etc/systemd/system/mlucas.service 
with a content similar to this one (adapt the file paths, user name and Mlucas options):
-------------------------
[Unit]
Description=MLucas GIMPS
After=network.target

[Service]
WorkingDirectory=/home/pi/mlucas/run0
ExecStart=/home/pi/mlucas/Mlucas_c2simd -cpu 0:3
StandardOutput=file:/home/pi/mlucas/run0/output.log
StandardError=file:/home/pi/mlucas/run0/output.log
Type=simple
User=pi
Restart=on-failure

[Install]
WantedBy=default.target
-------------------------
Reload systemd with
$ sudo systemctl daemon-reload
And run the daemons
$ sudo systemctl start primenet
$ sudo systemctl start mlucas
Then you can see the status of the script and its output:
$ sudo systemctl status primenet

If you created several working directory (for example, one per core), then, you can create only one systemd unit file using the @ to match the variable part.
Supose you have created several run0, run1, run2... directories, create a /etc/systemd/system/primenet@.service file, and use %I inside to match the variable part like this:
-------------------------
[Unit]
Description=MLucas GIMPS primenet
After=network.target

[Service]
WorkingDirectory=/home/pi/mlucas/run%I
ExecStart=/home/pi/mlucas/primenet.py -d
Type=simple
User=pi
Restart=on-failure

[Install]
WantedBy=default.target
-------------------------
Then, you can control the job using the following commands:
$ systemctl start primenet@0 primenet@1 primenet@2...
The same applies to mlucas unit file.
